<#
    // ################################################################
    //              Edit page - Javascript Implementation
    // ################################################################
#>

// ################################################################
//                      Code generated with T4
// ################################################################
<#
    CodeClass currentClass = classes.FirstOrDefault(c => c.Name == EntityNamePrefix + EntityName);
    var properties = currentClass.Members.OfType<EnvDTE.CodeProperty>().Where(p => p.Access.HasFlag(vsCMAccess.vsCMAccessPublic));
#>

var <#=ModuleName#> = <#=ModuleName#> || {};

// viewmodel

<#=ModuleName#>.<#=EntityNameLowerCase#> = function (<#

// Iterate each property of the domain class, and write the respective mapping to the view model
int counter = 0;
foreach(var currentProperty in properties)
{
    // skip audit properties because they are set with specific values
    if(currentProperty.Name != "ModuleId" 
        && currentProperty.Name != "CreateBy"
        && currentProperty.Name != "UpdateBy"
        && currentProperty.Name != "CreateOn"
        && currentProperty.Name != "UpdateOn")
    {
        string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

        // constructor with arguments for each property of the viewmodel
#><#if(counter > 0) {#>,<#}#> <#=propertyNameLowerCase#><#  }#>
<#  counter++;#>
<#}#>
) {
<#
    // Iterate each property of the domain class, and write the respective mapping to the view model
    foreach(var currentProperty in properties)
    {
        // skip audit properties because they are set with specific values
        if(currentProperty.Name != "ModuleId" 
            && currentProperty.Name != "CreateBy"
            && currentProperty.Name != "UpdateBy"
            && currentProperty.Name != "CreateOn"
            && currentProperty.Name != "UpdateOn")
        {
            string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

        // constructor sets variables for each property of the viewmodel
#>
    this.<#=propertyNameLowerCase#> = ko.observable(<#=propertyNameLowerCase#>);
<#      }#>
<#  }#>


    // remove

    this.remove = function (model, event) {
        model.isDeleted(true);
        model.isVisible(false);
    };


    this.visibleOnSearch = ko.observable(true);
    this.isVisible = ko.observable(!isDeleted);
}


// helper

<#=ModuleName#>.<#=EntityNameLowerCase#>Helper = function (isLoading, serviceRootUrl, moduleHeaders) {

    var <#=EntityNameLowerCase#>List = ko.observableArray([]);
    var deleted<#=EntityName#>List = ko.observableArray([]);
    var isLoading = isLoading;
    var serviceRootUrl = serviceRootUrl;
    var moduleHeaders = moduleHeaders;
    var searchText = ko.observable('');


    // get

    var get<#=EntityName#>List = function (callback) {
        isLoading(true);

        // need to calculate a different Url for <#=EntityName#> service
        var restUrl = serviceRootUrl + "api/<#=EntityName#>Api/GetList/";
        var jqXHR = $.ajax({
            url: restUrl,
            beforeSend: moduleHeaders,
            dataType: "json",
            async: false
        }).done(function (data) {
            if (data) {
                load<#=EntityName#>s(data);

                if (callback != null) {
                    callback(data);
                }
            }
            else {
                clear();
            }
        }).always(function (data) {
            isLoading(false);
        });
    };

<#if (ShouldGenerateParentEntityFunctions) {#>
    var getListBy<#=ParentEntityName#>Id = function (itemId, callback) {
        isLoading(true);

        // need to calculate a different Url for <#=EntityName#> service
        var restUrl = serviceRootUrl + "api/<#=EntityName#>Api/Get<#=EntityName#>ListBy<#=ParentEntityName#>Id/" + itemId;
        var jqXHR = $.ajax({
            url: restUrl,
            beforeSend: moduleHeaders,
            dataType: "json",
            async: false
        }).done(function (data) {
            if (data) {
                load<#=EntityName#>s(data);

                if (callback != null) {
                    callback(data);
                }
            }
            else {
                clear();
            }
        }).always(function (data) {
            isLoading(false);
        });
    };
<#}#>



    // load

    var load<#=EntityName#>s = function (data) {
        <#=EntityNameLowerCase#>List.removeAll();
        var underlyingArray = <#=EntityNameLowerCase#>List();
        for (var i = 0; i < data.length; i++) {
            var result = data[i];
            var <#=EntityNameLowerCase#> = new <#=ModuleName#>.<#=EntityNameLowerCase#>
            (
<#
    // Iterate each property of the domain class, and write the respective mapping to the view model
    counter = 0;
    foreach(var currentProperty in properties)
    {
        // skip audit properties because they are set with specific values
        if(currentProperty.Name != "ModuleId" 
            && currentProperty.Name != "CreateBy"
            && currentProperty.Name != "UpdateBy"
            && currentProperty.Name != "CreateOn"
            && currentProperty.Name != "UpdateOn")
        {
            string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

            // constructor with arguments for each property of the viewmodel
#>
<#if(counter > 0) {#>, 
<#}#>
                result.<#=propertyNameLowerCase#><#  }#>
<#      counter++;#>
<#  }#> 
            );
            underlyingArray.push(<#=EntityNameLowerCase#>);
        }
        <#=EntityNameLowerCase#>List.valueHasMutated();
    };


    // extract knockout array to simple json objects

    var extractKoArrayToJson = function (data) {
        var simpleArray = new Array();
        for (var i = 0; i < data.length; i++) {
            var result = data[i];
            var <#=EntityNameLowerCase#> = {
<#
    // Iterate each property of the domain class, and write the respective mapping to the view model
    counter = 0;
    foreach(var currentProperty in properties)
    {
        // skip audit properties because they are set with specific values
        if(currentProperty.Name != "ModuleId" 
            && currentProperty.Name != "CreateBy"
            && currentProperty.Name != "UpdateBy"
            && currentProperty.Name != "CreateOn"
            && currentProperty.Name != "UpdateOn")
        {
            string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

            // constructor with arguments for each property of the viewmodel
            // cargoInspectionPropertyId: result.cargoInspectionPropertyId(),
#>
<#if(counter > 0) {#>, 
<#}#>
                <#=propertyNameLowerCase#>: result.<#=propertyNameLowerCase#>()<#  }#>
<#      counter++;#>
<#  }#> 
            };

            simpleArray.push(<#=EntityNameLowerCase#>);
        }
        return simpleArray;
    };


<#if(GenerateViewPage_InlineEditTable)
{#>
    // save

    var save<#=EntityName#>s = function (<#if (ShouldGenerateParentEntityFunctions) {#>parentId, <#}#>callback) {
        isLoading(true);
        var ajaxMethod = "POST";
        var restUrl = serviceRootUrl + "api/<#=EntityName#>Api/SaveList/";

        // convert ko models to json
        var listToSave = extractKoArrayToJson(<#=EntityNameLowerCase#>List());

<#if (ShouldGenerateParentEntityFunctions) {#>
        // update parent id
        for (var i = 0; i < listToSave.length; i++) {
            var result = listToSave[i];
            <#string parentEntityNameLowerCase = ParentEntityName.Substring(0, 1).ToLower() + ParentEntityName.Substring(1, ParentEntityName.Length - 1);#> 
            result.<#=parentEntityNameLowerCase#>Id = parentId;
        }

<#}#>
        var jqXHR = $.ajax({
            method: ajaxMethod,
            url: restUrl,
            contentType: "application/json; charset=UTF-8",
            data: JSON.stringify(listToSave),
            dataType: "json"
        }).done(function (data) {
            console.log(data);
<#if(UseDNN) {#>
            dnnModal.closePopUp();
<#}#>
<#else {#>
            toastr.success('Gravado com sucesso');
<#  if (ShouldGenerateParentEntityFunctions) {#>
            getListBy<#=ParentEntityName#>Id(parentId);
<#  }#>
<#  else {#> 
            get<#=EntityName#>List();
<#  }#>
<#}#>

            if (callback != null) {
                callback(data);
            }
        }).always(function (data) {
            isLoading(false);
        });
    };


<#}#>
    // add

    var add<#=EntityName#> = function () {
        var <#=EntityNameLowerCase#> = new <#=ModuleName#>.<#=EntityNameLowerCase#>(0, '', '', '', '');
        <#=EntityNameLowerCase#>List.push(<#=EntityNameLowerCase#>);
    };


    // remove

    var remove<#=EntityName#> = function (model, event) {
        var <#=EntityNameLowerCase#> = model;
        <#=EntityNameLowerCase#>.isDeleted = true;
        deleted<#=EntityName#>List.push(<#=EntityNameLowerCase#>);
        <#=EntityNameLowerCase#>List.pop(<#=EntityNameLowerCase#>);
    };


    // clear

    var clear = function () {
        <#=EntityNameLowerCase#>List([]);
    };


    // quickSearch

    var quickSearch = function () {
        for (var i = 0; i < <#=EntityNameLowerCase#>List().length; i++) {
            var result = <#=EntityNameLowerCase#>List()[i];

            if(searchText() == null || searchText() == '' || (result.description() != null && result.description().toLowerCase().indexOf(searchText().toLowerCase()) >= 0))
            {
                result.visibleOnSearch(true);
            }
            else
            {
                result.visibleOnSearch(false);
            }
        }
    };

    $('#searchText').keyup(function() { quickSearch(); });
    

    return {
        <#=EntityNameLowerCase#>List: <#=EntityNameLowerCase#>List,
        deleted<#=EntityName#>List: deleted<#=EntityName#>List,
        get<#=EntityName#>List: get<#=EntityName#>List,
<#if (ShouldGenerateParentEntityFunctions) {#>
        getListBy<#=ParentEntityName#>Id: getListBy<#=ParentEntityName#>Id,
<#}#>
        load<#=EntityName#>s: load<#=EntityName#>s,
        isLoading: isLoading,
        add<#=EntityName#>: add<#=EntityName#>,
        remove<#=EntityName#>: remove<#=EntityName#>,
        clear: clear,
<#if(GenerateViewPage_InlineEditTable)
{#>
        save<#=EntityName#>s: save<#=EntityName#>s,
<#}#>
        searchText: searchText,
        quickSearch: quickSearch,
        extractKoArrayToJson: extractKoArrayToJson
    };
}