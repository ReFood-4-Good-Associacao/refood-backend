<#
    // ################################################################
    //              Edit page - Javascript Implementation
    // ################################################################
#>

// ################################################################
//                      Code generated with T4
// ################################################################
<#
    CodeClass currentClass = classes.FirstOrDefault(c => c.Name == EntityNamePrefix + EntityName);
    var properties = currentClass.Members.OfType<EnvDTE.CodeProperty>().Where(p => p.Access.HasFlag(vsCMAccess.vsCMAccessPublic));
#>

var <#=ModuleName#> = <#=ModuleName#> || {};

<#=ModuleName#>.<#=EntityNameLowerCase#>ViewModel = function (moduleId, resx) {
<#if(UseDNN) {#>
    var service = {
        path: "<#=NamespaceModule#>",
        framework: $.ServicesFramework(moduleId)
    }
    service.baseUrl = service.framework.getServiceRoot(service.path) + "<#=EntityName#>/";
<#}#>
<#else {#>
    var baseUrl = "/api/<#=EntityName#>Api/";
<#}#>

<#
// Iterate each property of the domain class, and write the respective mapping to the view model
foreach(var currentProperty in properties)
{
// skip audit properties because they are set with specific values
if(currentProperty.Name != "ModuleId" 
    && currentProperty.Name != "CreateBy"
    && currentProperty.Name != "UpdateBy"
    && currentProperty.Name != "CreateOn"
    && currentProperty.Name != "UpdateOn")
{
    string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

    // a ko observable of each property in the viewmodel

if(currentProperty.Name.EndsWith("Id"))
{
#>
    var <#=propertyNameLowerCase#> = ko.observable(-1);
<#}#>
<#else {#>
    var <#=propertyNameLowerCase#> = ko.observable('');
<#}#>
<#}#>
<#}#>
    var userList = ko.observableArray([]);
    var isLoading = ko.observable(false);



    // helpers

<#
    // Find properties for combo boxes
    foreach(var currentProperty in properties)
    {
        string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);
        if(currentProperty.Name != "ModuleId" && currentProperty.Name != EntityName + "Id" && currentProperty.Name.EndsWith("Id"))
        {
            if(UseDNN) 
            {
#>
    var <#=RemoveTailId(propertyNameLowerCase)#>Helper = <#=ModuleName#>.<#=RemoveTailId(propertyNameLowerCase)#>Helper(isLoading, service.framework.getServiceRoot(service.path), service.framework.setModuleHeaders);
<#          }#>
<#          else#>
<#          {#>
    var <#=RemoveTailId(propertyNameLowerCase)#>Helper = <#=ModuleName#>.<#=RemoveTailId(propertyNameLowerCase)#>Helper(isLoading, '/', function(){});
<#          }#>
<#      }#>
<#  }#>



    // init

    var init = function () {
        var qs = getQueryStrings();
        var <#=EntityNameLowerCase#>Id = qs["tid"];
        if (<#=EntityNameLowerCase#>Id) {
            get<#=EntityName#>(<#=EntityNameLowerCase#>Id);
        }
        //getUserList();

<#
    // Find properties for combo boxes
    foreach(var currentProperty in properties)
    {
        string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);
        if(currentProperty.Name != "ModuleId" && currentProperty.Name != EntityName + "Id" && currentProperty.Name.EndsWith("Id"))
        {
#>
        <#=RemoveTailId(propertyNameLowerCase)#>Helper.get<#=RemoveTailId(currentProperty.Name)#>List();
<#      }#>
<#  }#>
    };

    var getQueryStrings = function () {
        var assoc = {};
        var decode = function (s) { return decodeURIComponent(s.replace(/\+/g, " ")); };
        var queryString = location.search.substring(1);
        var keyValues = queryString.split('&');

        for (var i = 0; i < keyValues.length; i++) {
            var key = keyValues[i].split('=');
            if (key.length > 1) {
                assoc[decode(key[0])] = decode(key[1]);
            }
        }

        return addRewriteQueryString(assoc, decode);
    };

    var addRewriteQueryString = function (hash, decode) {
        var path = location.pathname;
        var queryString = path.substring(path.search('/ctl/') + 1);
        var keyValues = queryString.split('/');

        for (var i = 0; i < keyValues.length; i += 2) {
            hash[decode(keyValues[i])] = decode(keyValues[i + 1])
        }

        return hash;
    };



    // get

    var get<#=EntityName#> = function (<#=EntityNameLowerCase#>Id) {
        isLoading(true);

        var restUrl = <#if(UseDNN) {#>service.<#}#>baseUrl + "Get/" + <#=EntityNameLowerCase#>Id;
        var jqXHR = $.ajax({
            url: restUrl,
<#if(UseDNN) {#>
            beforeSend: service.framework.setModuleHeaders,
<#}#>
            dataType: "json"
        }).done(function (data) {
            if (data) {
                load(data);
            }
            else {
                clear();
            }
        }).always(function (data) {
            isLoading(false);
        });
    };



<#if(UseDNN) {#>
    var getUserList = function () {
        isLoading(true);

        // need to calculate a different Url for User service
        var restUrl = service.framework.getServiceRoot(service.path) + "User/";
        var jqXHR = $.ajax({
            url: restUrl,
            beforeSend: service.framework.setModuleHeaders,
            dataType: "json",
            async: false
        }).done(function (data) {
            if (data) {
                loadUsers(data);
            }
            else {
                clear();
            }
        }).always(function (data) {
            isLoading(false);
        });
    };



<#}#>
    // load

    var load = function (data) {
<#
// Iterate each property of the domain class, and write the respective mapping to the view model
foreach(var currentProperty in properties)
{
    // skip audit properties because they are set with specific values
    if(currentProperty.Name != "ModuleId" 
        && currentProperty.Name != "CreateBy"
        && currentProperty.Name != "UpdateBy"
        && currentProperty.Name != "CreateOn"
        && currentProperty.Name != "UpdateOn")
    {
        string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

        // load each property in the viewmodel
#>
<#      if(currentProperty.Type.AsString.Contains("System.DateTime") && UsejQueryDatepickerPlugin)#>
<#      {#>
        <#=propertyNameLowerCase#>(serverDateTimeStringToJavascriptDate(data.<#=propertyNameLowerCase#>));
<#      }#>
<#      else#>
<#      {#>
        <#=propertyNameLowerCase#>(data.<#=propertyNameLowerCase#>);
<#      }#>
<#  }#>
<#}#>
    };

    

    // save

    var save = function () {
        isLoading(true);
        var <#=EntityNameLowerCase#> = {
<#
// Iterate each property of the domain class, and write the respective mapping to the view model
foreach(var currentProperty in properties)
{
    // skip audit properties because they are set with specific values
    if(currentProperty.Name != "ModuleId" 
        && currentProperty.Name != "CreateBy"
        && currentProperty.Name != "UpdateBy"
        && currentProperty.Name != "CreateOn"
        && currentProperty.Name != "UpdateOn")
    {
        string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

        // read each property in the viewmodel
#>
<#      if(currentProperty.Type.AsString.Contains("System.DateTime") && UsejQueryDatepickerPlugin)#>
<#      {#>
            <#=propertyNameLowerCase#>: dateToStringServerFormat(<#=propertyNameLowerCase#>()),
<#      }#>
<#      else#>
<#      {#>
            <#=propertyNameLowerCase#>: <#=propertyNameLowerCase#>(),
<#      }#>
<#  }#>
<#}#>
        };
        var ajaxMethod = "POST";
        var restUrl = <#if(UseDNN) {#>service.<#}#>baseUrl + "Upsert/";

        if (<#=EntityNameLowerCase#>.<#=EntityNameLowerCase#>Id > 0) {
            // ajaxMethod = "PATCH";
            restUrl += <#=EntityNameLowerCase#>.<#=EntityNameLowerCase#>Id;
        }
        else {
            restUrl += 0;
        }

        var jqXHR = $.ajax({
            method: ajaxMethod,
            url: restUrl,
            contentType: "application/json; charset=UTF-8",
            data: JSON.stringify(<#=EntityNameLowerCase#>),
<#if(UseDNN) {#>
            beforeSend: service.framework.setModuleHeaders,
<#}#>
            dataType: "json"
        }).done(function (data) {
            console.log(data);
<#if(UseDNN) {#>
            dnnModal.closePopUp();
<#}#>
<#else {#>
            toastr.success('Gravado com sucesso');
<#}#>
        }).always(function (data) {
            isLoading(false);
        });
    };

<#if(UseDNN) {#>
    var loadUsers = function (data) {
        userList.removeAll();
        var underlyingArray = userList();
        for (var i = 0; i < data.length; i++) {
            var result = data[i];
            var user = new <#=ModuleName#>.user(result.id, result.name);
            underlyingArray.push(user);
        }
        userList.valueHasMutated();
    };



<#}#>
    // clear

    var clear = function () {
<#
// Iterate each property of the domain class, and write the respective mapping to the view model
foreach(var currentProperty in properties)
{
// skip audit properties because they are set with specific values
if(currentProperty.Name != "ModuleId" 
    && currentProperty.Name != "CreateBy"
    && currentProperty.Name != "UpdateBy"
    && currentProperty.Name != "CreateOn"
    && currentProperty.Name != "UpdateOn")
{
    string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

    // clear each property in the viewmodel
#>
        <#=propertyNameLowerCase#>('');
<#}#>
<#}#>
    };


    
    // cancel

    var cancel = function () {
        dnnModal.closePopUp(false);
    };



    // return viewmodel

    return {
<#
// Iterate each property of the domain class, and write the respective mapping to the view model
foreach(var currentProperty in properties)
{
// skip audit properties because they are set with specific values
if(currentProperty.Name != "ModuleId" 
    && currentProperty.Name != "CreateBy"
    && currentProperty.Name != "UpdateBy"
    && currentProperty.Name != "CreateOn"
    && currentProperty.Name != "UpdateOn")
{
    string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

    // read each property in the viewmodel
#>
        <#=propertyNameLowerCase#>: <#=propertyNameLowerCase#>,
<#}#>
<#}#>
        userList: userList,
        cancel: cancel,
        load: load,
        save: save,
        init: init,
        isLoading: isLoading,
<#
    // Find properties for combo boxes
    foreach(var currentProperty in properties)
    {
        string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);
        if(currentProperty.Name != "ModuleId" && currentProperty.Name != EntityName + "Id" && currentProperty.Name.EndsWith("Id"))
        {
#>
        <#=RemoveTailId(propertyNameLowerCase)#>List: <#=RemoveTailId(propertyNameLowerCase)#>Helper.<#=RemoveTailId(propertyNameLowerCase)#>List,
<#      }#>
<#  }#>
    };
}

<#=ModuleName#>.user = function (id, name) {
    this.id = id;
    this.name = name;
}



// aux

<#if(UsejQueryDatepickerPlugin && UseKnockoutJs)#>
<#{#>
// date picker

ko.bindingHandlers.datepicker = {
    init: function (element, valueAccessor, allBindingsAccessor) {
        //initialize datepicker with some optional options
        var options = allBindingsAccessor().datepickerOptions || {},
            $el = $(element);

        $el.datepicker(options);

        //handle the field changing
        ko.utils.registerEventHandler(element, "change", function () {
            var observable = valueAccessor();
            observable($el.datepicker("getDate"));
        });

        //handle disposal (if KO removes by the template binding)
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            $el.datepicker("destroy");
        });

    },
    update: function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor()),
            $el = $(element);

        //handle date data coming via json from Microsoft
        if (String(value).indexOf('/Date(') == 0) {
            value = new Date(parseInt(value.replace(/\/Date\((.*?)\)\//gi, "$1")));
        }

        var current = $el.datepicker("getDate");

        if (value - current !== 0) {
            $el.datepicker("setDate", value);
        }
    }
};



// date format

function dateToStringServerFormat(d) {
    // server format: 2017-10-20T00:00:00
    var datestring = d.getFullYear() + "-" + ("0" + (d.getMonth() + 1)).slice(-2) + "-" + ("0" + d.getDate()).slice(-2) + "T00:00:00";
    return datestring;
}

function serverDateTimeStringToJavascriptDate(dateString) {

    // server format: 2017-10-20T00:00:00
    // desired format: 20-10-2017

    var date;
    if (dateString != null && dateString.length >= 10) {

        var day = dateString.substring(8, 10);
        // javascript datetime months have a zero based index
        var month = dateString != null ? parseInt(dateString.substring(5, 7)) - 1 : 0; 
        var year = dateString.substring(0, 4);

        var hours = dateString.substring(11, 13);
        var minutes = dateString.substring(14, 16);
        var seconds = dateString.substring(17, 19);

        date = new Date(year, month, day, hours, minutes, seconds);
    }
    return date;
}

function dateTimeToStringServerFormat(d) {
    // server format: 2017-10-20T00:00:00
    if (d != null)
    {
        var datestring = d.getFullYear() + "-" + ("0" + (d.getMonth() + 1)).slice(-2) + "-" + ("0" + d.getDate()).slice(-2)
            + "T" + ("0" + d.getHours()).slice(-2) + ":" + ("0" + d.getMinutes()).slice(-2) + ":00";
        return datestring;
    }
    else
    {
        return null;
    }
}



<#}#>