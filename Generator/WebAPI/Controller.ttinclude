<#
    // ################################################################
    //                Web API Controller Implementation
    // ################################################################
#>

// ################################################################
//                      Code generated with T4
// ################################################################

<#if(UseDNN) {#>
using DotNetNuke.Common;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Security;
using DotNetNuke.UI.Modules;
using DotNetNuke.Web.Api;
<#}#>
using <#=NamespaceModule#>.Components;
using <#=NamespaceViewModels#>;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Web.Http;
using <#=NamespaceServices#>;
using <#=NamespaceServices#>.DTOs;
using <#=NamespaceServices#>.Interfaces;

namespace <#=NamespaceModule + ".Services"#>
{
<#
    CodeClass currentClass = classes.FirstOrDefault(c => c.Name == EntityNamePrefix + EntityName);
    var properties = currentClass.Members.OfType<EnvDTE.CodeProperty>().Where(p => p.Access.HasFlag(vsCMAccess.vsCMAccessPublic));
#>
<#if(UseDNN) {#>
    [SupportedModules("<#=NamespaceModule#>")]
    [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.View)]
<#}#>
    public partial class <#=EntityName#>Controller <#if(UseDNN) {#>: DnnApiController<#}#> 
    {
        private readonly I<#=EntityName#>Service _<#=EntityNameLowerCase#>Service;

<#if (Uselog4net) {#>
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
<#}#>

        public <#=EntityName#>Controller(I<#=EntityName#>Service <#=EntityNameLowerCase#>Service)
        {
            Requires.NotNull(<#=EntityNameLowerCase#>Service);

            this._<#=EntityNameLowerCase#>Service = <#=EntityNameLowerCase#>Service;
        }

        public <#=EntityName#>Controller() : this(<#=EntityName#>Service.Instance) { }

        [HttpGet]
        public HttpResponseMessage Delete(int itemId)
        {
            try
            {
                // delete
                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Delete<#=EntityName#> - <#=EntityNameLowerCase#>Id: " + itemId + " ");<#}#> 

                _<#=EntityNameLowerCase#>Service.Delete<#=EntityName#>(itemId<#if(UseDNNModuleId) {#>, ActiveModule.ModuleID<#}#>);

                <#if (Uselog4net) {#>log.Debug("result: 'success'");<#}#> 

                return Request.CreateResponse(System.Net.HttpStatusCode.NoContent);
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

        public HttpResponseMessage Get(int itemId)
        {
            try
            {
                // get
                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Get<#=EntityName#> - <#=EntityNameLowerCase#>Id: " + itemId + " ");<#}#> 

                var <#=EntityNameLowerCase#> = new <#=EntityName#>ViewModel(_<#=EntityNameLowerCase#>Service.Get<#=EntityName#>(itemId<#if(UseDNNModuleId) {#>, ActiveModule.ModuleID<#}#>));

                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Get<#=EntityName#> - " + <#=EntityName#>ViewModel.Format<#=EntityName#>ViewModel(<#=EntityNameLowerCase#>));<#}#> 

                <#if (Uselog4net) {#>log.Debug("result: 'success'");<#}#> 

                return Request.CreateResponse(<#=EntityNameLowerCase#>);
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

        public HttpResponseMessage GetList()
        {
            try
            {
                // get list
                List<<#=EntityName#>ViewModel> <#=EntityNameLowerCase#>s;

                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Get<#=EntityName#>s");<#}#> 

                // add edit url
                <#=EntityNameLowerCase#>s = _<#=EntityNameLowerCase#>Service.Get<#=EntityName#>s(<#if(UseDNNModuleId) {#>ActiveModule.ModuleID<#}#>)
                        .Select(<#=EntityNameLowerCase#> => new <#=EntityName#>ViewModel(<#=EntityNameLowerCase#>, GetEditUrl(<#=EntityNameLowerCase#>.<#=EntityName#>Id)))
                        .ToList();

                <#if (Uselog4net) {#>log.Debug("result: 'success', count: " + (<#=EntityNameLowerCase#>s != null ? <#=EntityNameLowerCase#>s.Count().ToString() : "null"));<#}#> 

                return Request.CreateResponse(<#=EntityNameLowerCase#>s);
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

        public HttpResponseMessage GetPage(int itemId = 0, string searchTerm = "", int pageIndex = 1, int pageSize = 10)
        {
            try
            {
                // get page
                List<<#=EntityName#>ViewModel> <#=EntityNameLowerCase#>s;

                if(pageIndex <= 0)
                {
                    pageIndex = 1;
                }

                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Get<#=EntityName#>s - searchTerm: '" + (searchTerm != null ? searchTerm : "") + "', pageIndex: " + pageIndex + ", pageSize: " + pageSize);<#}#> 

                if (Globals.IsEditMode())
                {
                    // add edit url
                    <#=EntityNameLowerCase#>s = _<#=EntityNameLowerCase#>Service.Get<#=EntityName#>s(searchTerm, pageIndex, pageSize)
                           .Select(<#=EntityNameLowerCase#> => new <#=EntityName#>ViewModel(<#=EntityNameLowerCase#>, GetEditUrl(<#=EntityNameLowerCase#>.<#=EntityName#>Id)))
                           .ToList();
                }
                else
                {
                    <#=EntityNameLowerCase#>s = _<#=EntityNameLowerCase#>Service.Get<#=EntityName#>s(searchTerm, pageIndex, pageSize)
                           .Select(<#=EntityNameLowerCase#> => new <#=EntityName#>ViewModel(<#=EntityNameLowerCase#>, ""))
                           .ToList();
                }

                <#if (Uselog4net) {#>log.Debug("result: 'success', count: " + (<#=EntityNameLowerCase#>s != null ? <#=EntityNameLowerCase#>s.Count().ToString() : "null"));<#}#> 

                return Request.CreateResponse(<#=EntityNameLowerCase#>s);
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

<#if(GenerateViewPage_SearchFilters){#>
        public HttpResponseMessage GetListAdvancedSearch(
            int itemId = 0 
<#
    // advanced search filters - function arguments
    int countArgs = 1;
    foreach(var currentProperty in properties)
    {
        // skip audit properties because they are set with specific values
        if(currentProperty.Name != "ModuleId" 
            && currentProperty.Name != "CreateBy"
            && currentProperty.Name != "UpdateBy"
            && currentProperty.Name != "CreateOn"
            && currentProperty.Name != "UpdateOn"
            && currentProperty.Name != "IsDeleted"
            && currentProperty.Name != EntityName + "Id")
        {
            string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

            // add each property

            if (currentProperty.Type.AsString.Contains("System.DateTime")) {#>
            <#if(countArgs > 0){#>,<#}#> <#=currentProperty.Type.AsString#><#if(!currentProperty.Type.AsString.EndsWith("?")){#>?<#}#> <#=propertyNameLowerCase#>From = null 
            <#if(countArgs > 0){#>,<#}#> <#=currentProperty.Type.AsString#><#if(!currentProperty.Type.AsString.EndsWith("?")){#>?<#}#> <#=propertyNameLowerCase#>To = null 
<#          }#>
<#          else {#>
            <#if(countArgs > 0){#>,<#}#> <#=currentProperty.Type.AsString#><#if(!currentProperty.Type.AsString.EndsWith("?") && currentProperty.Type.AsString != "string"){#>?<#}#> <#=propertyNameLowerCase#> = null 
<#          }#>
<#          countArgs++;#>
<#      }#>
<#  }#>
        )
        {
            try
            {
                // advanced search

                <#if (Uselog4net) {#>log.Debug("Get<#=EntityName#>ListAdvancedSearch");<#}#> 

                IEnumerable<<#=EntityNameDTO#>> resultsDTO = _<#=EntityNameLowerCase#>Service.Get<#=EntityName#>ListAdvancedSearch(
<#
    // advanced search filters - function arguments
    int countArgs2 = 0;
    foreach(var currentProperty in properties)
    {
        // skip audit properties because they are set with specific values
        if(currentProperty.Name != "ModuleId" 
            && currentProperty.Name != "CreateBy"
            && currentProperty.Name != "UpdateBy"
            && currentProperty.Name != "CreateOn"
            && currentProperty.Name != "UpdateOn"
            && currentProperty.Name != "IsDeleted"
            && currentProperty.Name != EntityName + "Id")
        {
            string propertyNameLowerCase = currentProperty.Name.Substring(0, 1).ToLower() + currentProperty.Name.Substring(1, currentProperty.Name.Length - 1);

            // add each property
            if (currentProperty.Type.AsString.Contains("System.DateTime")) {#>
                    <#if(countArgs2 > 0){#>,<#}#> <#=propertyNameLowerCase#>From 
                    , <#=propertyNameLowerCase#>To 
<#          }#>
<#          else {#>
                    <#if(countArgs2 > 0){#>,<#}#> <#=propertyNameLowerCase#> 
<#          }#>
<#          countArgs2++;#>
<#      }#>
<#  }#>
                );
            
                // convert to view model list, and add edit url
                List<<#=EntityName#>ViewModel> <#=EntityNameLowerCase#>List = resultsDTO.Select(<#=EntityNameLowerCase#> => new <#=EntityName#>ViewModel(<#=EntityNameLowerCase#>, GetEditUrl(<#=EntityNameLowerCase#>.<#=EntityName#>Id))).ToList();

                <#if (Uselog4net) {#>log.Debug("result: 'success', count: " + (<#=EntityNameLowerCase#>List != null ? <#=EntityNameLowerCase#>List.Count().ToString() : "null"));<#}#> 

                return Request.CreateResponse(<#=EntityNameLowerCase#>List);
            }
            catch(System.Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

<#}#>
        
<#if (ShouldGenerateParentEntityFunctions) {#>
        public HttpResponseMessage Get<#=EntityName#>ListBy<#=ParentEntityName#>Id(int itemId)
        {
            try
            {
                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Get<#=EntityName#>ListBy<#=ParentEntityName#>Id - <#=ParentEntityName#>Id: " + itemId + " ");<#}#> 

                List<<#=EntityName#>ViewModel> <#=EntityNameLowerCase#>s;
            
                <#=EntityNameLowerCase#>s = _<#=EntityNameLowerCase#>Service.Get<#=EntityName#>ListBy<#=ParentEntityName#>Id(itemId<#if(UseDNNModuleId) {#>, ActiveModule.ModuleID<#}#>)
                        .Select(<#=EntityNameLowerCase#> => new <#=EntityName#>ViewModel(<#=EntityNameLowerCase#>, ""))
                        .ToList();

                <#if (Uselog4net) {#>log.Debug("result: 'success'");<#}#> 

                return Request.CreateResponse(<#=EntityNameLowerCase#>s);
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }
        
<#}#>
        protected string GetEditUrl(int id)
        {
            string editUrl = Globals.NavigateURL("Edit", string.Format("mid={0}", ActiveModule.ModuleID), string.Format("tid={0}", id));

            if (PortalSettings.EnablePopUps)
            {
                editUrl = UrlUtils.PopUpUrl(editUrl, PortalSettings, false, false, 550, 950);
            }
            return editUrl;
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public HttpResponseMessage Upsert(<#=EntityName#>ViewModel viewModel)
        {
            <#if (Uselog4net) {#>log.Debug("Upsert");<#}#> 

            if (viewModel.<#=EntityName#>Id > 0)
            {
                var t = Update(viewModel);
                return Request.CreateResponse(System.Net.HttpStatusCode.NoContent);
            }
            else
            {
                var t = Create(viewModel);
                return Request.CreateResponse(t.<#=EntityName#>Id);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public HttpResponseMessage SaveList(<#=EntityName#>ViewModel[] viewModels, int? itemId)
        {
            try
            {
                <#if (Uselog4net) {#>log.Debug("SaveList");<#}#> 

                if(viewModels != null)
                {
                    // save list
                    foreach(<#=EntityName#>ViewModel viewModel in viewModels)
                    {
                        <#if (Uselog4net) {#>log.Debug(<#=EntityName#>ViewModel.Format<#=EntityName#>ViewModel(viewModel));<#}#> 

                        if (viewModel.<#=EntityName#>Id > 0)
                        {
                            var t = Update(viewModel);
                        }
                        else
                        {
                            var t = Create(viewModel);
                        }

                    }
                }
                else
                {
                    <#if (Uselog4net) {#>log.Error("viewModels: null");<#}#> 
                }

                return Request.CreateResponse(System.Net.HttpStatusCode.NoContent);
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

        private <#=EntityNameDTO#> Create(<#=EntityName#>ViewModel viewModel)
        {
            try
            {
                <#if (Uselog4net) {#>log.Debug(<#=EntityName#>ViewModel.Format<#=EntityName#>ViewModel(viewModel));<#}#> 

                <#=EntityNameDTO#> <#=EntityNameLowerCase#> = new <#=EntityNameDTO#>();

                // copy values
<#
                // Iterate each property of the domain class, and write the respective mapping to the view model
                foreach(var currentProperty in properties)
                {
                    // skip audit properties because they are set with specific values
                    if(currentProperty.Name != "ModuleId" 
                        && currentProperty.Name != "CreateBy"
                        && currentProperty.Name != "UpdateBy"
                        && currentProperty.Name != "CreateOn"
                        && currentProperty.Name != "UpdateOn")
                    {
                        // copy the value of each property from the viewmodel
#>
                <#=EntityNameLowerCase#>.<#=currentProperty.Name#> = viewModel.<#=currentProperty.Name#>;
<#                  }#>
<#              }#>

                <#if(UseDNNModuleId) {#>//<#=EntityNameLowerCase#>.ModuleId = ActiveModule.ModuleID;<#}#>

                // audit
                <#=EntityNameLowerCase#>.CreateBy = UserInfo.UserID;
                <#=EntityNameLowerCase#>.UpdateBy = UserInfo.UserID;
                <#=EntityNameLowerCase#>.CreateOn = DateTime.UtcNow;
                <#=EntityNameLowerCase#>.UpdateOn = DateTime.UtcNow;

                // add
                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Add<#=EntityName#> - " + <#=EntityNameDTO#>.Format<#=EntityNameDTO#>(<#=EntityNameLowerCase#>));<#}#> 

                int id = _<#=EntityNameLowerCase#>Service.Add<#=EntityName#>(<#=EntityNameLowerCase#>);

                <#if (Uselog4net) {#>log.Debug("result: 'success', id: " + id);<#}#> 

                return <#=EntityNameLowerCase#>;
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

        private <#=EntityNameDTO#> Update(<#=EntityName#>ViewModel viewModel)
        {
            try
            {
                <#if (Uselog4net) {#>log.Debug(<#=EntityName#>ViewModel.Format<#=EntityName#>ViewModel(viewModel));<#}#> 

                // get
                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Get<#=EntityName#> - <#=EntityNameLowerCase#>Id: " + viewModel.<#=EntityName#>Id + " ");<#}#> 

                var existing<#=EntityName#> = _<#=EntityNameLowerCase#>Service.Get<#=EntityName#>(viewModel.<#=EntityName#>Id<#if(UseDNNModuleId) {#>, ActiveModule.ModuleID<#}#>);

                <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Get<#=EntityName#> - " + <#=EntityNameDTO#>.Format<#=EntityNameDTO#>(existing<#=EntityName#>));<#}#> 

                if (existing<#=EntityName#> != null)
                {
                    // copy values
<#
                // Iterate each property of the domain class, and write the respective mapping to the view model
                foreach(var currentProperty in properties)
                {
                    // skip audit properties because they are set with specific values
                    if(currentProperty.Name != "CreateBy" 
                        && currentProperty.Name != "UpdateBy" 
                        && currentProperty.Name != "CreateOn"
                        && currentProperty.Name != "UpdateOn"
                        && currentProperty.Name != EntityName+"Id")
                    {
                    // copy the value of each property from the viewmodel
#>
                    existing<#=EntityName#>.<#=currentProperty.Name#> = viewModel.<#=currentProperty.Name#>;
<#                  }#>
<#              }#>

                    // audit
                    existing<#=EntityName#>.UpdateBy = UserInfo.UserID;
                    existing<#=EntityName#>.UpdateOn = DateTime.UtcNow;

                    // update
                    <#if (Uselog4net) {#>log.Debug("_<#=EntityNameLowerCase#>Service.Update<#=EntityName#> - " + <#=EntityNameDTO#>.Format<#=EntityNameDTO#>(existing<#=EntityName#>));<#}#> 

                    _<#=EntityNameLowerCase#>Service.Update<#=EntityName#>(existing<#=EntityName#>);

                    <#if (Uselog4net) {#>log.Debug("result: 'success'");<#}#> 
                }
                else
                {
                    <#if (Uselog4net) {#>log.Error("existing<#=EntityName#>: null, <#=EntityName#>Id: " + viewModel.<#=EntityName#>Id);<#}#> 
                }

                return existing<#=EntityName#>;
            }
            catch(Exception e)
            {
                // error
                <#if (Uselog4net) {#>log.Error(e.ToString());<#}#> 

                throw;
            }
        }

    }
}